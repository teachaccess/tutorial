"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[38],{5312:(e,t,n)=>{n.d(t,{ML:()=>u});n(3117),n(102);var a=n(7294),o=n(3905),i=n(4456),r=n(2202),d=n(8120),s=n(4669),l=(n(5935),n(8378)),u=function(e){var t=e.checkExercise,n=e.children,u=void 0===n?"":n,c=a.useState(Math.round(1e5*Math.random()))[0],m=a.useState(),k=(m[0],m[1]),b=a.useState(u),p=b[0],v=b[1],h=a.useRef();a.useEffect((function(){var e=new i.tk({state:d.yy.create({doc:u,extensions:[r.Xy,(0,s.dy)(),i.tk.updateListener.of((function(e){e.docChanged&&v(e.state.doc.toString())}))]}),parent:document.querySelector("#editor-"+c)});k(e)}),[]);var y=(0,o.kt)("div",null,(0,o.kt)("div",{className:"playground-header"},"Live editor"),(0,o.kt)("div",{id:"editor-"+c,className:"npm__react-simple-code-editor__textarea"})),f=(0,o.kt)("div",null,(0,o.kt)("div",{className:"playground-header"},"Result"),(0,o.kt)("div",{id:t?"exercise":"",className:"html-output",ref:h,dangerouslySetInnerHTML:{__html:p}})),g=t&&(0,o.kt)(l.Ep,{checkExercise:function(){return t(h.current)},mdxType:"VerifyButton"});return(0,o.kt)(a.Fragment,null,(0,o.kt)("div",{className:"editor-container"},y,f),g)}},8378:(e,t,n)=>{n.d(t,{Ep:()=>i});n(3117),n(102);var a=n(7294),o=n(3905),i=function(e){var t=e.checkExercise,n=(0,a.useState)(null),i=n[0],r=n[1],d="Well done!",s=function(){var e=t();r(e||d)};return(0,o.kt)("div",{className:"verify"},(0,o.kt)("button",{type:"button",className:"button",onClick:s},"Verify"),function(){if(i){var e=i===d;return(0,o.kt)("div",{className:e?"success":"error",role:"alert"},i)}}())}},8224:(e,t,n)=>{n.r(t),n.d(t,{frontMatter:()=>s,contentTitle:()=>l,metadata:()=>u,toc:()=>c,default:()=>k});var a=n(3117),o=n(102),i=(n(7294),n(3905)),r=n(5312),d=["components"],s={title:"Keyboard navigation",sidebar_label:"2.4. Keyboard navigation",id:"keyboard-navigation"},l=void 0,u={unversionedId:"code/keyboard-navigation",id:"code/keyboard-navigation",title:"Keyboard navigation",description:"Make all interactive elements work with a keyboard. For example, make sure a",source:"@site/../docs/code/keyboard-navigation.mdx",sourceDirName:"code",slug:"/code/keyboard-navigation",permalink:"/tutorial/code/keyboard-navigation",tags:[],version:"current",lastUpdatedBy:"Rachel Ruderman",lastUpdatedAt:1645081201,formattedLastUpdatedAt:"2/17/2022",frontMatter:{title:"Keyboard navigation",sidebar_label:"2.4. Keyboard navigation",id:"keyboard-navigation"},sidebar:"docs",previous:{title:"2.3. Images",permalink:"/tutorial/code/images"},next:{title:"2.5. Labels",permalink:"/tutorial/code/labels"}},c=[{value:"Semantic button",id:"semantic-button",children:[],level:2},{value:"Exercise: Unsemantic button",id:"exercise-unsemantic-button",children:[],level:2}],m={toc:c};function k(e){var t=e.components,n=(0,o.Z)(e,d);return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Make all interactive elements work with a keyboard. For example, make sure a\nbutton that you activate with a click is also in the keyboard tab sequence and that pressing enter or space\nactivates it. Set the ",(0,i.kt)("inlineCode",{parentName:"p"},"tabindex")," attribute to ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," to include an element in the\nbrowser's keyboard tab sequence. If you want an element out of sequence, set\nits ",(0,i.kt)("inlineCode",{parentName:"p"},"tabindex")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"-1")," and use JavaScript to control its focus and tab\nsequence, and related keyboard events. We do not recommend using ",(0,i.kt)("inlineCode",{parentName:"p"},"tabindex"),"\nvalues greater than ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," even though browsers support them. Note that HTML links\nand input elements have an implied ",(0,i.kt)("inlineCode",{parentName:"p"},"tabindex")," of ",(0,i.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,i.kt)("h2",{id:"semantic-button"},"Semantic button"),(0,i.kt)("p",null,"The button below uses a semantic ",(0,i.kt)("inlineCode",{parentName:"p"},"button")," tag and is correctly announced by\nscreen readers. If you are on a Mac, turn on VoiceOver and tab to the\nbutton. You will hear the name of the element and the element type announced\nby VoiceOver."),(0,i.kt)(r.ML,{mdxType:"Editor"},"<button onclick=\"alert('Take a HIKE!')\">\n  Submit\n</button>"),(0,i.kt)("h2",{id:"exercise-unsemantic-button"},"Exercise: Unsemantic button"),(0,i.kt)("p",null,"The button below is constructed using an unsemantic ",(0,i.kt)("inlineCode",{parentName:"p"},"div"),". The easiest way to\nmake this semantic is to use a real ",(0,i.kt)("inlineCode",{parentName:"p"},"button")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"input")," tag. Here is another way. In the\nexample below, add"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"role='button'")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"tabindex='0'"))),(0,i.kt)("p",null,"Verify with VoiceOver that you can tab to the button and hear the button name and the fact\nthat it is a button element. Note that you would need to add an ",(0,i.kt)("inlineCode",{parentName:"p"},"onkeypress")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"onkeydown")," handler to the button so you can tab to the button and press ",(0,i.kt)("kbd",null,"enter")," to activate it using just the keyboard."),(0,i.kt)(r.ML,{checkExercise:function(e){var t=e.getElementsByClassName("customButton")[0];if(!(t.hasAttribute("tabindex")&&"0"===t.getAttribute("tabindex")&&"button"===t.getAttribute("role")))return"It doesn't look like your custom button is accessible yet."},mdxType:"Editor"},"<div class='customButton'>\n  Submit\n</div>"))}k.isMDXComponent=!0}}]);